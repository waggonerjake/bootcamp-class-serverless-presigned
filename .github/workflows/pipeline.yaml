name: Pipeline

on:
  push:
    branches:
      - 'master'
      - 'feature**'
env:
  bucketname: jwaggon-bootcamp-2022-bucket1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm ci
      - run: npm test

  # deploy-feature:
  #   environment: dev
  #   # this stage is triggered only for feature branches (feature*),
  #   # which will build the stack and deploy to a stack named with branch name.
  #   if: startsWith(github.ref, 'refs/heads/feature')
  #   needs: [test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v1
  #     - run: sam build --template ${SAM_TEMPLATE} --use-container

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: feature-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to feature stack in the testing account
  #       shell: bash
  #       run: |
  #         sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${TESTING_REGION} \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}

  deploy-dev:
    environment: dev
    if: github.ref == 'refs/heads/master'
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v2

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          role-to-assume: arn:aws:iam::775564629368:role/github-actions-role-Role-FZH08AJ4J25N
          role-session-name: dev-deployment

      - run: npm ci
      - run: sls deploy --stage dev

  # integration-test:
  #   if: github.ref == 'refs/heads/master'
  #   needs: [deploy-testing]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: deploy.txt
  #     - name: Get dev api endpoint
  #       run: |
  #         echo "endpoint=$(cat deploy.txt | grep -o -E 'https:\/\/.*\.execute-api\.\S+')" >> $GITHUB_ENV
  #     - name: Print the endpoint value
  #       run: |
  #         echo "${{ env.endpoint }}"
  # deploy-prod:
  #   environment: Dev
  #   if: github.ref == 'refs/heads/master'
  #   needs: [integration-test]
  #   runs-on: ubuntu-latest
  #   # Configure GitHub Action Environment to have a manual approval step before deployment to production
  #   # https://docs.github.com/en/actions/reference/environments
  #   # environment: <configured-environment>
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v1
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: packaged-prod.yaml

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.PROD_REGION }}
  #         role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to production account
  #       run: |
  #         sam deploy --stack-name ${PROD_STACK_NAME} \
  #           --template packaged-prod.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${PROD_REGION} \
  #           --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}