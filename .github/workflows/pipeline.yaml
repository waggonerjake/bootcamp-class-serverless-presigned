name: Pipeline

on:
  push:
    branches:
      - 'master'
      - 'feature**'
# env:
#   PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   SAM_TEMPLATE: test-api/template.yaml
#   TESTING_STACK_NAME: dev
#   TESTING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::662342343056:role/aws-sam-cli-managed-dev-pipe-PipelineExecutionRole-2LNZKWE5TEF4
#   TESTING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::662342343056:role/aws-sam-cli-managed-dev-p-CloudFormationExecutionR-16OWESR5AV6D7
#   TESTING_ARTIFACTS_BUCKET: aws-sam-cli-managed-dev-pipeline-artifactsbucket-16eidj8f9rv0a
#   TESTING_REGION: us-east-1
#   PROD_STACK_NAME: prod
#   PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::662342343056:role/aws-sam-cli-managed-prod-pip-PipelineExecutionRole-WHQYA6B4P9U6
#   PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::662342343056:role/aws-sam-cli-managed-prod-CloudFormationExecutionR-AE6P9P6XNM3E
#   PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-prod-pipeline-artifactsbucket-cnhaexp0j30s
#   PROD_REGION: us-east-1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm ci
      - run: npm test

  # build-and-deploy-feature:
  #   environment: Dev
  #   # this stage is triggered only for feature branches (feature*),
  #   # which will build the stack and deploy to a stack named with branch name.
  #   if: startsWith(github.ref, 'refs/heads/feature')
  #   needs: [test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v1
  #     - run: sam build --template ${SAM_TEMPLATE} --use-container

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: feature-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to feature stack in the testing account
  #       shell: bash
  #       run: |
  #         sam deploy --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${TESTING_REGION} \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE}
  # build-and-package:
  #   environment: Dev
  #   if: github.ref == 'refs/heads/master'
  #   needs: [test]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v1

  #     - name: Build resources
  #       run: sam build --template ${SAM_TEMPLATE} --use-container

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Upload artifacts to testing artifact buckets
  #       run: |
  #         sam package \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --region ${TESTING_REGION} \
  #           --output-template-file packaged-testing.yaml
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: packaged-testing.yaml
  #         path: packaged-testing.yaml

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.PROD_REGION }}
  #         role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-packaging
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Upload artifacts to production artifact buckets
  #       run: |
  #         sam package \
  #           --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
  #           --region ${PROD_REGION} \
  #           --output-template-file packaged-prod.yaml
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: packaged-prod.yaml
  #         path: packaged-prod.yaml

  # deploy-testing:
  #   environment: Dev
  #   if: github.ref == 'refs/heads/master'
  #   needs: [build-and-package]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v1
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: packaged-testing.yaml

  #     - name: Assume the testing pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.TESTING_REGION }}
  #         role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: testing-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to testing account
  #       run: |
  #         sam deploy --stack-name ${TESTING_STACK_NAME} \
  #           --template packaged-testing.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${TESTING_REGION} \
  #           --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE} \
  #           | tee deploy.txt
  #     - uses: actions/upload-artifact@v2
  #       with:
  #         name: deploy.txt
  #         path: deploy.txt

  # integration-test:
  #   if: github.ref == 'refs/heads/master'
  #   needs: [deploy-testing]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: deploy.txt
  #     - name: Get dev api endpoint
  #       run: |
  #         echo "endpoint=$(cat deploy.txt | grep -o -E 'https:\/\/.*\.execute-api\.\S+')" >> $GITHUB_ENV
  #     - name: Print the endpoint value
  #       run: |
  #         echo "${{ env.endpoint }}"
  # deploy-prod:
  #   environment: Dev
  #   if: github.ref == 'refs/heads/master'
  #   needs: [integration-test]
  #   runs-on: ubuntu-latest
  #   # Configure GitHub Action Environment to have a manual approval step before deployment to production
  #   # https://docs.github.com/en/actions/reference/environments
  #   # environment: <configured-environment>
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #     - uses: aws-actions/setup-sam@v1
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: packaged-prod.yaml

  #     - name: Assume the prod pipeline user role
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ env.PROD_REGION }}
  #         role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
  #         role-session-name: prod-deployment
  #         role-duration-seconds: 3600
  #         role-skip-session-tagging: true

  #     - name: Deploy to production account
  #       run: |
  #         sam deploy --stack-name ${PROD_STACK_NAME} \
  #           --template packaged-prod.yaml \
  #           --capabilities CAPABILITY_IAM \
  #           --region ${PROD_REGION} \
  #           --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
  #           --no-fail-on-empty-changeset \
  #           --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE}